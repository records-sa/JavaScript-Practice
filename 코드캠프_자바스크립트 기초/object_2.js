// 부장님 나이스샷!
// 등수별 수상자의 인원이 적힌 객체 winners가 주어질 때, 해당 등수를 수상할 인원의 수에 맞게 배열에 담아 return하기
// 예를 들어, 1위가 2명, 2위가 1명이라면 [1, 1, 2] 형태로 return

function solution(winners) {
  const result = [];

  for(등수 in winners) {    // 객체의 속성을 하나씩 가져와야 할 때 for ~ in 사용
    for(let i = 1; i <= winners[등수]; i++) {    // 키 값이 없기 때문에 winners.등수 로 쓸수 없음
      result.push(Number.등수);
    }
  }
  return result;
}
  
solution({
  1: 1,
  2: 2,
  3: 4,
});
// [1, 2, 2, 3, 3, 3, 3];


// 워크샵은 역시 등산이지
// 팀을 만들어서 인원이 홀수가 되는 팀을 데려가기
// 사람들은 팀 번호 1부터 5까지 적힌 종이를 뽑게 되며, 사람들이 뽑은 숫자가 배열에 담김
// 예를 들어 첫 번째 사람이 2를 뽑고 두 번째 사람이 5를 뽑고 세 번째 사람이 5를 뽑은 경우, [2, 5, 5]의 배열이 주어지게 되며 이 안에서 2는 한 명, 5는 두 명이 나왔기 때문에 2를 뽑은 팀이 워크샵에 당첨
// 사람들이 뽑은 숫자를 담은 배열 arr가 주어질 때, 워크샵에 가게 되는 팀의 숫자를 return

function solution(arr){
  // {팀번호: 인원수}
  const 뽑기결과 = {};
  arr.map((팀번호) => {
    if(뽑기결과[팀번호] === undefined) {
      뽑기결과[팀번호] = 1;
    } else {
      뽑기결과[팀번호] = 뽑기결과[팀번호] + 1;
    }
  })
  
  // 홀수인 인원
  const 인원수 = Object.values(뽑기결과);    // 객체에서 값만 가져오기
  const 홀수 = 인원수.find((인원) => 인원 % 2 === 1);    // find는 배열에서 특정 조건에 부합하는 객체를 찾을 수 있음
  
  // 팀번호
  const 팀번호 = Object.keys(뽑기결과);    // 객체에서 키만 가져오기
  const 홀수인팀 = 팀번호.find((번호) => 뽑기결과[번호] === 홀수);

  return Number(홀수인팀);
}
  
solution([1, 2, 2, 1, 1]); // 1
solution([5, 1, 2, 2, 5, 3, 3, 1, 5]); // 5
solution([2, 4, 3, 3, 2, 4, 1]); // 1


// 잡았다 요놈!
// 팀원의 이름과 냉장고 사용 시간을 객체 형태로 담은 배열이 arr로 주어질 때, 가장 늦은 시간에 냉장고를 이용한 사람을 찾아 “범인은 바로 @@@입니다!”를 return하기

function solution(arr){
  let 늦은시간 = 0;
  let 범인 = "";

  arr.map((찾기) => {
    if (찾기.time > 0) {
      늦은시간 = 찾기.time;
      범인 = 찾기.name;
    }
  });
  return `범인은 바로 ${범인}입니다!`;
}
  
  solution([
    {
      name: "카페",
      time: 15,
    },
    {
      name: "모카",
      time: 12,
    },
    {
      name: "라떼",
      time: 10,
    },
    {
      name: "아라비카",
      time: 16,
    },
  ]);
  // "범인은 바로 아라비카 입니다!"